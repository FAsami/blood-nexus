generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  emailVerified DateTime?
  phone         String?   @unique
  phoneVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  tokens        Token[]
  userRoles     UserRole[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  bloodDonationRequests BloodDonationRequest[]
}

model Token {
  id        String   @id @default(cuid())
  userId    String
  token     String
  type      TokenType @default(OTP)
  createdAt DateTime @default(now())
  expiresAt DateTime @default(dbgenerated("NOW() + interval '15 minutes'"))

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  userRoles   UserRole[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, roleId])
}

enum TokenType {
  OTP
  RESET_PASSWORD
  EMAIL_VERIFICATION
  PHONE_VERIFICATION
}


model Organization {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  logoUrl     String?
  faviconUrl  String?
  seo         Json?    @default("{}")
  theme       Json?    @default("{}")
  settings    Json?    @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Patient {
  id          String   @id @default(cuid())
  name        String
  phone       String?
  email       String?
  address     String?
  city        String?
  state       String?
  country     String?
  zipCode     String?
  gender      String?
  age         Int?
  bloodGroup  BloodGroup?
  disease     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bloodDonationRequests BloodDonationRequest[]
}

model Hospital {
  id          String   @id @default(cuid())
  name        String
  address     String? 
  city        String?
  state       String?
  country     String?
  zipCode     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bloodDonationRequests BloodDonationRequest[]
}


model BloodDonationRequest {
  id          String   @id @default(cuid())
  userId      String?
  locationId  String
  locationDetails Json?
  hospitalId    String?
  hospital     Hospital? @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  bloodGroup  BloodGroup
  unit        Int?
  patient     Patient? @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId   String?
  status      BloodDonationRequestStatus @default(PENDING)
  notes       String?
  reason      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum BloodDonationRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum BloodGroup {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
}
