generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String          @id @default(cuid())
  name          String?
  phone         String?
  phoneVerified DateTime?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[] 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  donationRequests DonationRequest[]
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}



enum BloodGroup {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
}

enum RequestStatus {
  PENDING
  FULFILLED
  CANCELLED
}

enum RequestUrgency {
  NORMAL
  URGENT
  EMERGENCY
}


model Patient {
  id              String            @id @default(cuid())
  name            String
  age             Int
  bloodGroup      BloodGroup
  medicalNotes    String?
  donationRequests DonationRequest[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}
model DonationRequest {
  id              String        @id @default(cuid())
  patientId       String        
  patient         Patient       @relation(fields: [patientId], references: [id])
  unitsNeeded     Int
  locationId      String        
  location        Location      @relation(fields: [locationId], references: [id])
  userId          String        
  user            User          @relation(fields: [userId], references: [id])
  urgency         RequestUrgency @default(NORMAL)
  status          RequestStatus  @default(PENDING)
  requiredBefore  DateTime
  reason          String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Location {
  id                String            @id @default(cuid())
  placeId           String            @unique  
  name              String           
  formattedAddress  String            
  area              String?           
  city              String           
  district          String?           
  division          String?           
  country           String
  postalCode        String?
  latitude          Float
  longitude         Float
  phoneNumber       String?
  isVerified        Boolean           @default(false)
  donationRequests  DonationRequest[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}


